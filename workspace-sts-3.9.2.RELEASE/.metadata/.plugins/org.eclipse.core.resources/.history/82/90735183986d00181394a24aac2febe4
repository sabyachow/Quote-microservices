package com.rating.auto.service;

import java.net.URI;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.atomic.AtomicLong;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;
import com.rating.auto.model.Customer;
import com.rating.auto.model.Quote;
import com.rating.auto.model.Vehicle;


@Service
public class QuoteService {
    private static final Logger log = LoggerFactory.getLogger(QuoteService.class);
    private static final AtomicLong q_counter = new AtomicLong();
    private final RestTemplate restTemplate;
	private static DecimalFormat df2 = new DecimalFormat(".##");

	@Autowired
	private QuoteRepository repository;

    public QuoteService(RestTemplate rest) {
        this.restTemplate = rest;
    }
    
	@HystrixCommand(fallbackMethod = "reliable")
	public Quote getQuote(String type, List<Customer> customers, List<Vehicle> vehicles, double _m_prem) {
		URI uri = URI.create("http://localhost:8090/addCustomer");

	    HttpEntity<Customer> request = new HttpEntity<>(customers.get(0));

	    Customer responseEntity = restTemplate.postForObject(uri, request, Customer.class);

		List<Customer> customersResponse = new ArrayList<Customer>();
		customersResponse.add(responseEntity);
	    log.info("Test");

		//This is where the premium is set
	    double m_premium = new Double(df2.format((new Random().nextDouble())*100));
		try {
			if(("Premium").equals(type)) {
				//Thread.sleep(10000);
			    log.info("Premium");

				m_premium = new Double(df2.format(_m_prem+_m_prem*0.35));
			}
		}catch (Exception e) {
				e.printStackTrace();
		}
		


		double y_premium = (m_premium*12)-100;
		

		return new Quote(new Random().nextLong(), type, customersResponse, vehicles, m_premium, y_premium);
	}
 	
	 public Quote reliable(String type, List<Customer> customers, List<Vehicle> vehicles, double _M_prem) {
		    log.info("Curcuit Breacker Invoked");

			return new Quote(new Random().nextLong(), type, customers, vehicles, 0, 0);
	}
	
	private long getPremium() {
		return new Random().nextLong();	
	}
	
	private Quote storeQuoteMDB(Quote quote) {
	    log.info("Inside Store Quote");
	    repository.save(quote);
	    return quote;

	}

}
